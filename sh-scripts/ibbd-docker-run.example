#!/bin/bash
#
# 为系统提供命令：ibbd-docker-run
# 注意：只在本地开发环境使用
#
# @author cyy0523xc@gmail.com
# Usage: ibbd-docker-run help
#        ibbd-docker-run dev
#        ibbd-docker-run node-dev {8080}
#        ibbd-docker-run php
#        ibbd-docker-run php stop
#        ibbd-docker-run load php-fpm
# 
# 注意：使用之前先将该文件复制到/usr/local/bin
#
# @author cyy0523xc@gmail.com
# @date   2015-09-22
#

#########################################################
# 注意：配置目录
# 最后不要加/
# docker-Compass编排容器的时候需要用到
ibbd_docker_run_root=/var/www/github/docker-images

# 代码目录
code_path=/var/www

# 日志目录
logs_path=/var/log

# 镜像下载的保存地址
image_download_path=/data/image-download

# PHP镜像名: 本地使用开发镜像
php_image_name=php-dev
php_container_name=php-fpm
#########################################################

set -e
cd $ibbd_docker_run_root

# 有些平台没有sudo命令，例如windows下使用mingw的环境
sudo=
if which sudo; then 
    sudo=sudo
fi

username=$(whoami)
if [ ! -d $image_download_path ]
then 
    echo 'mkdir '$image_download_path
    $sudo mkdir -p $image_download_path
    $sudo chown -R $username:$username $image_download_path
fi

usage() {
    name=$0
    name=${name##*/}
    echo "usage: $name node-dev|php|mysql-cli|php-cli|php-bash|nginx-cli|mongo-cli|redis-cli [start|stop|restart]"
    echo "usage: $name python2-cli|python2-bash|python3-cli|python3-bash|scrapy-bash|scrapy-cli"
    echo "usage: $name ruby-cli|ruby-bash"
    echo "   ie: $name dev"
    echo "       $name node-dev"
    echo "       $name node-dev 8080"
    echo "       $name php"
    echo "       $name php stop"
    echo "       $name load php-dev"
    echo 
    echo '说明：'
    echo 
    echo '- cli后缀的是进入对应的命令行界面，通常是进入交互模式, 不带后缀的是进入一个环境'
    echo '- bash后缀：进入交互界面，例如php的命令行界面，就是/bin/bash'
    echo '- dev: 进入一个本地开发环境，包含vim，tmux，git等基本的开发工具'
    echo '- node-dev: 进入本地的node开发环境，除了nodejs外，还包含ruby2.3，python2.7，Gulp，SASS，Compass等基本工具. 可以指定监听的端口号, 默认不监听'
    echo '- php：php的运行环境。后面可以跟start，stop，restart等参数'
    echo '- php-bash: 进入php的命令行。对比php-cli是进入php的交互模式'
    echo '- python2-cli: 进入python2的交互模式'
    echo '- scrapy-bash: 进入爬虫的命令行界面'
    echo '- load {image name}: 加载从本地局域网内加载一个新的镜像, 以解决国内下载镜像过慢的问题'
    echo '注意：虽然dev容器可以允许在容器内部编辑代码，不过还有比较多的问题没解决。所以尽量不要在容器内部使用编辑工具'

    exit 1
}

# 启动开发环境，允许启动时指定命令
# @param string 容器启动时执行的命令，默认为tmux
run_dev() {
    # 可以直接启动指定的命令
    # tmux下使用vim有点问题
    #ibbd_command=tmux 
    ibbd_command=/bin/bash 
    if [ 1 -eq $# ]
    then
        ibbd_command=$*
    fi

    # 把本地的.ssh映射到镜像里，只读
    # 使用git的时候，需要在外部生成ssh key
    name=base-dev-tools
    $sudo docker run -ti --rm --name=ibbd-$name \
        -v /var/www:/var/www \
        -v ~/.ssh:/root/.ssh:ro \
        -w /var/www \
        ibbd/$name \
        $ibbd_command
}

# 启动nodejs本地开发环境
# @param number port,端口号
run_node_dev() {
    name=node-dev
    port=
    if [ $1 -gt 0 ]; then 
        port="-p $1:$1"
    fi

    # 如果容器不存在，则直接运行；否则则进入
    if $sudo docker inspect ibbd-$name; then 
        $sudo docker exec -ti ibbd-$name /bin/bash
    else
        $sudo docker run -it --rm --name ibbd-$name \
            -v $code_path:/var/www \
            -v $logs_path/node:/var/log/node \
            $port ibbd/$name \
            /bin/bash
    fi
}

# 进入容器
# @param string 容器名
# @param string 进入容器的命令
exec_cli() {
    echo $2
    $sudo docker exec -ti ibbd-$1 $2
}

# 加载一个镜像，如果镜像不存在，则从内网下载
# @todo 不同的内网，需要自己修改
# @param string 镜像名，如node-dev
load_image() {
    host=cyy.docker.images
    ip=192.168.1.59
    if ! grep $host /etc/hosts; then 
        echo >> /etc/hosts 
        echo '# 内部镜像下载（程序自动添加）' >> /etc/hosts
        echo "$ip $host" >> /etc/hosts
        echo "Add '$ip $host' to /etc/hosts"
    fi
    
    # 获取最后一个文件的文件名
    path=http://$host/$1
    html=$(wget $path -O -)
    filename=$(echo $html | grep -e $1"-[0-9]\+.tar" -o|tail -n 1)

    # 判断该文件在下载目录是否存在
    if ls $image_download_path/$filename; then 
        echo "$image_download_path/$filename is existed!"
        echo "如果需要，请手动加载镜像：docker load -i $image_download_path/$filename"
        echo '加载新的镜像之前需要先删除该镜像下的容器，再删除重名镜像'
        exit 1
    else
        path=$path'/'$filename
        echo "download the file: $path"
        wget $path -O $image_download_path/$filename
        echo 'download finish!'
    fi

    # 加载新的镜像
    container_name=ibbd-$1
    image_name=ibbd/$1
    if [ 'busybox' = $1 ]
    then 
        container_name=ibbd-data
        image_name=busybox
    fi

    $sudo docker stop $container_name
    $sudo docker rm $container_name 
    $sudo docker rmi $image_name

    echo '操作完成。可能需要手动重启对应的环境：ibbd-docker-run '
}

# 启动PHP环境
# @param string 动作类型：start（默认），stop，restart
run_php() {
    # 先确定./php-fpm-dev/docker-compose.yml文件是否存在
    cd $ibbd_docker_run_root/php-fpm-dev/
    dc_filename=docker-compose.yml
    if [ ! -f $dc_filename ]
    then
        echo "ERROR: $dc_filename is not existed!"
        exit 1
    else
        if [ $action = start ]
        then
            # 启动PHP环境
            # --no-recreate 加上这个的话，改变配置文件启动可能会出问题，link改变了
            $sudo docker-compose up -d --no-build
        elif [ $action = stop ] 
        then
            # 停止PHP环境
            $sudo docker-compose stop
        elif [ $action = restart ] 
        then
            # 重启PHP环境
            ibbd-docker-run php stop
            ibbd-docker-run php start
        else
            echo 'ERROR: supported for start|stop|restart'
            exit 1
        fi
    fi
} 
# end of run_php 

if [ 0 -eq $# ]
then
    usage 
fi

case $1 in
    "dev")
        run_dev 
        ;;
    'node-dev')
        # 端口号，默认0（即不监听端口)
        # node可以启动服务器
        port=0
        if [ 2 -eq $# ]; then 
            if echo $2|grep -E '^[0-9]+$'; then 
                port=$2
            fi
        fi
        run_node_dev $port
        ;;
    "php-bash")
        exec_cli $php_container_name /bin/bash
        ;;
    'scrapy-bash'|'python2-bash'|'python3-bash'|'ruby-bash')
        name=$1
        name=${name%-*}
        $sudo docker run -ti --rm ibbd/$name /bin/bash 
        ;;
    'python2-cli'|'python3-cli'|'scrapy-cli'|'ruby-cli')
        name=$1
        name=${name%-*}
        case $name in 
            'ruby')
                exec_cmd=irb
                ;;
            'python2'|'python3'|'scrapy')
                exec_cmd=ipython
                ;;
            *)
                exec_cmd=$name
                ;;
        esac
        $sudo docker run -ti --rm ibbd/$name $exec_cmd
        ;;
    "php-cli"|"mysql-cli"|"redis-cli"|"nginx-cli"|"mongo-cli")
        # 进入对应容器的命令行
        name=$1
        name=${name%-*}

        # 进入容器所要执行的命令
        case $name in 
            'php')
                exec_cmd='php -a'
                ;;
            'mysql')
                exec_cmd='mycli -h ibbd-mariadb -u root -p 111111'
                #exec_cmd='/bin/bash'
                ;;
            'mongo')
                exec_cmd='mongo'
                ;;
            'nginx')
                exec_cmd='/bin/bash'
                ;;
            'redis')
                exec_cmd='redis-cli'
                ;;
            *)
                exec_cmd='/bin/bash'
                ;;
        esac

        [ 'php' = $name ] && name=$php_container_name
        [ 'mysql' = $name ] && name=mariadb
        exec_cli $name "$exec_cmd"
        ;;
    "php")
        # 初始化动作类型
        if [ 1 -eq $# ]
        then
            action=start
        else
            action=$2
        fi
        run_php $action
        ;;

    'load')
        load_image "$2"
        ;;
    *)
        echo 'ERROR'
        echo 
        usage 
        ;;
esac

